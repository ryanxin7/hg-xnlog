[{"categories":["Github"],"content":"使用 GitHub Actions 来自动构建 Docker 镜像并将其上传到 Docker Registry 时，需要以下步骤进行设置： 工作流会在每次将代码推送到 main 分支时执行。它首先检出代码，然后设置 Docker Buildx 环境，接着登录到指定的 Docker Registry，最后构建并推送 Docker 镜像。 创建 Dockerfile：在你的 GitHub 仓库中创建一个名为 Dockerfile 的文件，用于定义镜像的构建过程和内容。 设置 Secrets：在仓库的设置中，添加三个 Secrets，分别是你的 Docker Registry 用户名、密码或访问令牌，以及 Docker Registry 的地址。 创建 Workflow 文件：在 .github/workflows/ 目录下创建一个 .yml 文件（例如：docker-build.yml），在这个文件中定义工作流程的步骤。 Workflow 配置：在 Workflow 文件中，配置工作流程的触发条件，比如当代码被推送到特定分支时触发。然后，定义构建步骤，包括： 检出代码 设置 Docker Buildx 环境（用于构建多平台镜像） 登录到 Docker Registry，使用之前设置的 Secrets 使用 Docker 构建和推送镜像到 Registry，可以指定标签等信息。 ","date":"2023-08-25","objectID":"/posts/blog/push-docker-images-github-registry/:0:0","tags":["Docker","Hugo"],"title":"使用Github Action 构建Docker镜像并上传Registry","uri":"/posts/blog/push-docker-images-github-registry/"},{"categories":["Github"],"content":"创建拥有上传权限的token ","date":"2023-08-25","objectID":"/posts/blog/push-docker-images-github-registry/:1:0","tags":["Docker","Hugo"],"title":"使用Github Action 构建Docker镜像并上传Registry","uri":"/posts/blog/push-docker-images-github-registry/"},{"categories":["Github"],"content":"测试登录Registry 测试登录 root@harbor01[14:16:02]~ #:docker login --username ryanxin7 --password ghp_xxxxxxxx ghcr.io WARNING! Using --password via the CLI is insecure. Use --password-stdin. WARNING! Your password will be stored unencrypted in /root/.docker/config.json. Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store Login Succeeded","date":"2023-08-25","objectID":"/posts/blog/push-docker-images-github-registry/:2:0","tags":["Docker","Hugo"],"title":"使用Github Action 构建Docker镜像并上传Registry","uri":"/posts/blog/push-docker-images-github-registry/"},{"categories":["Github"],"content":"构建镜像测试上传到Regisry root@harbor01[14:22:43]/dockerfile/xn-blog #:docker image build -t ghcr.io/xnlog:latest ./ DEPRECATED: The legacy builder is deprecated and will be removed in a future release. Install the buildx component to build images with BuildKit: https://docs.docker.com/go/buildx/ Sending build context to Docker daemon 19.04MB Step 1/4 : FROM nginx:latest ---\u003e 89da1fb6dcb9 Step 2/4 : COPY public/ /usr/share/nginx/html ---\u003e Using cache ---\u003e 342e46da94ee Step 3/4 : COPY default.conf /etc/nginx/conf.d/default.conf ---\u003e Using cache ---\u003e 56c7d4347a26 Step 4/4 : EXPOSE 8848 ---\u003e Using cache ---\u003e 35e2e284b708 Successfully built 35e2e284b708 Successfully tagged ghcr.io/xnlog:latest root@racknerd-20e7f5:~# docker pull ghcr.io/ryanxin7/xnlog:latest latest: Pulling from ryanxin7/xnlog 52d2b7f179e3: Pull complete fd9f026c6310: Pull complete 055fa98b4363: Pull complete 96576293dd29: Pull complete a7c4092be904: Pull complete e3b6889c8954: Pull complete da761d9a302b: Pull complete e8c074410147: Pull complete 4d2b965ac974: Pull complete Digest: sha256:3bcffe2f09e7584d9b05da90af16c43b195c377ce645dbc013f8b9ba70ce83de Status: Downloaded newer image for ghcr.io/ryanxin7/xnlog:latest ghcr.io/ryanxin7/xnlog:latest","date":"2023-08-25","objectID":"/posts/blog/push-docker-images-github-registry/:3:0","tags":["Docker","Hugo"],"title":"使用Github Action 构建Docker镜像并上传Registry","uri":"/posts/blog/push-docker-images-github-registry/"},{"categories":["Github"],"content":"在packages中查看镜像 ","date":"2023-08-25","objectID":"/posts/blog/push-docker-images-github-registry/:4:0","tags":["Docker","Hugo"],"title":"使用Github Action 构建Docker镜像并上传Registry","uri":"/posts/blog/push-docker-images-github-registry/"},{"categories":["Github"],"content":"配置action secret ","date":"2023-08-25","objectID":"/posts/blog/push-docker-images-github-registry/:5:0","tags":["Docker","Hugo"],"title":"使用Github Action 构建Docker镜像并上传Registry","uri":"/posts/blog/push-docker-images-github-registry/"},{"categories":["Github"],"content":"创建workflow文件 mkdir workflow name: Docker Image CI for GHCR on: push jobs: build_and_publish: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Build and push the image run: | docker login --username ryanxin7 --password ${{ secrets.DOCKERPACKAING }} ghcr.io docker build docker/. --tag ghcr.io/ryanxin7/xnlog:latest docker push ghcr.io/ryanxin7/xnlog:latest ","date":"2023-08-25","objectID":"/posts/blog/push-docker-images-github-registry/:6:0","tags":["Docker","Hugo"],"title":"使用Github Action 构建Docker镜像并上传Registry","uri":"/posts/blog/push-docker-images-github-registry/"},{"categories":["Github"],"content":"测试提交代码 xx9z@xin MINGW64 /c/xnblog/xnlog (main) $ git add . xx9z@xin MINGW64 /c/xnblog/xnlog (main) $ git commit -m \"blog update\" [main a5724b1] blog update 5 files changed, 477 insertions(+) create mode 100644 content/posts/Blog/push-docker-images-github-registry.md rename \"content/posts/\\344\\275\\277\\347\\224\\250Algolia\\345\\256\\236\\347\\216\\260Hugo\\346\\234\\254\\345\\234\\260\\346\\231\\272\\350\\203\\275\\346\\220\\234\\347\\264\\242.md\" =\u003e \"content/posts/Blog/\\344\\275\\277\\347\\224\\250Algolia\\345\\256\\236\\347\\216\\260Hugo\\346\\234\\254\\345\\234\\260\\346\\231\\272\\350\\203\\275\\346\\220\\234\\347\\264\\242.md\" (100%) create mode 100644 content/posts/kubernetes/k8s-replace-NFS-storage.md create mode 100644 \"content/posts/kubernetes/k8s\\345\\274\\272\\345\\210\\266\\345\\210\\240\\351\\231\\244pod\u0026pv\u0026pvc\\345\\222\\214ns\u0026namespace\\346\\226\\271\\346\\263\\225.md\" create mode 100644 content/posts/kubernetes/redis-on-k8scluster.md xx9z@xin MINGW64 /c/xnblog/xnlog (main) $ git push origin main Enumerating objects: 14, done. Counting objects: 100% (14/14), done. Delta compression using up to 16 threads Compressing objects: 100% (9/9), done. Writing objects: 100% (10/10), 5.57 KiB | 2.78 MiB/s, done. Total 10 (delta 2), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (2/2), completed with 2 local objects. To github.com:ryanxin7/hg-xnlog.git 12d766d..a5724b1 main -\u003e main ","date":"2023-08-25","objectID":"/posts/blog/push-docker-images-github-registry/:7:0","tags":["Docker","Hugo"],"title":"使用Github Action 构建Docker镜像并上传Registry","uri":"/posts/blog/push-docker-images-github-registry/"},{"categories":["Hugo"],"content":"1.简介 Algolia是一家提供搜索即服务的技术公司，帮助开发者为他们的应用程序或网站构建高速、精准的搜索功能。 免费的计划每个月可以查询10000次，对于个人站点也是够用了。 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:1:0","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"2. 配置Algolia Algolia的配置步骤通常包括以下几个主要方面：创建账户、导入数据、设置索引、集成到应用程序中以及调整搜索体验。 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:2:0","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"2.1 创建账号 访问Algolia的官方网站（https://www.algolia.com/），注册一个账户并登录。Google和Github账号可以直接登录。 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:2:1","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"2.2 创建应用程序 选择免费套餐 选择位置 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:2:2","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"2.3 创建索引 在Algolia控制台中，创建一个新的索引。索引是存储数据的容器，用于执行搜索操作。 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:2:3","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"2.4 导入数据 您可以使用Algolia的API、SDK或工具来导入数据，确保数据字段与搜索需求匹配。 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:2:4","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"2.5 配置搜索属性 定义索引字段，为每个索引定义需要搜索和显示的字段。也可以设置字段的搜索权重和过滤条件。 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:2:5","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"2.6 配置排名规则 调整搜索结果的排名规则，以确保最相关的结果显示在顶部 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:2:6","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"2.6 测试搜索 通过Algolia UI界面，测试搜索效果。 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:2:7","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"3.配置hugo主题使用Algolia搜索 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:3:0","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"3.1 获取Algolia Key 点击右上角头像—\u003esetting—\u003e API Keys ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:3:1","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"3.2 配置主题相关参数 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中。 在 Hugo 中，可以通过修改网站配置文件（通常是 config.toml、config.yaml 或 config.json）来指定不同部分的输出格式。这样，可以在生成网站页面时，为不同的页面部分选择不同的输出格式，包括 JSON。 打开网站配置文件。 寻找名为 outputs 的部分，如果没有则创建它。 在 outputs 部分中，可以为不同的页面部分指定输出格式。 # Options to make hugo output files home = [\"HTML\", \"RSS\", \"JSON\", \"BaiduUrls\"] page = [\"HTML\", \"MarkDown\"] section = [\"HTML\", \"RSS\"] taxonomy = [\"HTML\", \"RSS\"] taxonomyTerm = [\"HTML\"]保存网站配置文件 在运行 Hugo 构建命令（例如 hugo 或 hugo build）以生成网站时，Hugo 将生成 index.json 文件作为上述部分的输出。 outputFormats 在 Algolia 中，outputFormats 是用于控制返回搜索结果的格式的设置选项之一。 通过调整 outputFormats，可以决定搜索结果以何种格式返回应用程序。 [MarkDown] mediaType = \"text/markdown\" isPlainText = true isHTML = false # Options to make output baidu_urls.txt file [BaiduUrls] baseName = \"baidu_urls\" mediaType = \"text/plain\" isPlainText = true isHTML = false这段代码的作用是为 Hugo 网站生成 Algolia 搜索所需的 JSON 索引文件，以便在搜索时快速检索和展示内容。 {{- if .Site.Params.search -}} {{- $index := slice -}} {{- $pages := where .Site.RegularPages \"Params.password\" \"eq\" nil -}} {{- if .Site.Params.page.hiddenFromSearch -}} {{- $pages = where $pages \"Params.hiddenfromsearch\" false -}} {{- else -}} {{- $pages = where $pages \"Params.hiddenfromsearch\" \"!=\" true -}} {{- end -}} {{- range $pages -}} {{- $uri := .RelPermalink -}} {{- if $.Site.Params.search.absoluteURL -}} {{- $uri = .Permalink -}} {{- end -}} {{- $meta := dict \"uri\" $uri \"title\" .Title \"tags\" .Params.tags \"categories\" .Params.categories -}} {{- $meta = $.Site.Params.dateFormat | default \"2006-01-02\" | .PublishDate.Format | dict \"date\" | merge $meta -}} {{- with .Description -}} {{- $index = $index | append (dict \"content\" . \"objectID\" $uri | merge $meta) -}} {{- end -}} {{- $params := .Params | merge $.Site.Params.page -}} {{/* Extended Markdown syntax */}} {{- $content := dict \"Content\" .Content \"Ruby\" $params.ruby \"Fraction\" $params.fraction \"Fontawesome\" $params.fontawesome | partial \"function/content.html\" -}} {{/* Remove line number for code */}} {{- $content = $content | replaceRE `\u003cspan class=\"lnt?\"\u003e *\\d*\\n?\u003c/span\u003e` \"\" -}} {{- range $i, $contenti := split $content \"\u003ch2 id=\" -}} {{- if gt $i 0 -}} {{- $contenti = printf \"\u003ch2 id=%v\" $contenti -}} {{- end -}} {{- range $j, $contentj := split $contenti \"\u003ch3 id=\" -}} {{- if gt $j 0 -}} {{- $contentj = printf \"\u003ch3 id=%v\" $contentj -}} {{- end -}} {{/* Plainify, unescape and remove (\\n, \\t) */}} {{- $contentj = $contentj | plainify | htmlUnescape | replaceRE `[\\n\\t ]+` \" \" -}} {{- if gt $.Site.Params.search.contentLength 0 -}} {{- $contentj = substr $contentj 0 $.Site.Params.search.contentLength -}} {{- end -}} {{- if $contentj | and (ne $contentj \" \") -}} {{- $one := printf \"%v:%v:%v\" $uri $i $j | dict \"content\" $contentj \"objectID\" | merge $meta -}} {{- $index = $index | append $one -}} {{- end -}} {{- end -}} {{- end -}} {{- end -}} {{- $index | jsonify | safeJS -}} {{- end -}}","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:3:2","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"3.3 配置hugo主题应用Algolia # 搜索配置 [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\", \"fuse\"] type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"xx-log\" appID = \"SFSFN4DBN1\" searchKey = \"bd48328538sdb2f38b20753c17c60ba92f\"","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:3:3","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":["Hugo"],"content":"4.测试效果 ","date":"2023-08-15","objectID":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/:4:0","tags":["个人网站","Hugo"],"title":"使用Algolia实现Hugo本地智能搜索","uri":"/posts/blog/%E4%BD%BF%E7%94%A8algolia%E5%AE%9E%E7%8E%B0hugo%E6%9C%AC%E5%9C%B0%E6%99%BA%E8%83%BD%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"Ryan's friends","date":"2023-07-26","objectID":"/friends/","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"交换名片 - nickname: Ryan's NoteBooks avatar: http://cdn1.ryanxin.live/ryan-ai11.png url: http://xinn.cc description: 记录文字，遇见共鸣","date":"2023-07-26","objectID":"/friends/:1:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":["Hugo"],"content":"语法 admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅。 支持 Markdown 或者 HTML 格式。 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数： type [必需]（第一个位置参数） admonition 横幅的类型，默认值是 note。 title [可选]（第二个位置参数） admonition 横幅的标题，默认值是 type 参数的值。（支持 markdown） open [可选]（第三个位置参数） 横幅内容是否默认展开，默认值是 true。 一个 admonition 示例： {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}}\r一个 **技巧** 横幅\r{{\u003c /admonition \u003e}}\r或者\r{{\u003c admonition tip \"This is a tip\" false \u003e}}\r一个 **技巧** 横幅\r{{\u003c /admonition \u003e}}呈现的输出效果如下： This is a tip\r一个 技巧 横幅\r","date":"2023-07-24","objectID":"/posts/blog/%E4%BA%94%E8%8A%B1%E5%85%AB%E9%97%A8%E7%9A%84-markdown-admonitions/:1:0","tags":["个人网站"],"title":"五花八门的 Markdown Admonition","uri":"/posts/blog/%E4%BA%94%E8%8A%B1%E5%85%AB%E9%97%A8%E7%9A%84-markdown-admonitions/"},{"categories":null,"content":"1. 开通 Github Aciton 上传代码一般已Github仓库为主，但Jenkins由于网络原因经常无法拉取Github上的代码，于是考虑将Github仓库自动同步到Gitee上，拉取国内仓库代码进行自动部署。 ","date":"2023-06-12","objectID":"/posts/cicd/github-synctogitee/:1:0","tags":["CI/CD","持续集成"],"title":"Github Actions 自动同步到 Gitee","uri":"/posts/cicd/github-synctogitee/"},{"categories":null,"content":"1.1 在Github仓库下开通Actions的功能 点击Actions选项卡→ 点击右下角Create a new workflow，命名为SyncToGitee.yml即可 ","date":"2023-06-12","objectID":"/posts/cicd/github-synctogitee/:1:1","tags":["CI/CD","持续集成"],"title":"Github Actions 自动同步到 Gitee","uri":"/posts/cicd/github-synctogitee/"},{"categories":null,"content":"1.2 编写workflow的yml代码 可以复制如下代码到自己yml中，需要更改的地方，在代码中已经标出。 name: SyncToGitee on: push: branches: - main jobs: repo-sync: runs-on: ubuntu-latest steps: - name: Checkout source codes uses: actions/checkout@v3 - name: Mirror the Github organization repos to Gitee. uses: Yikun/hub-mirror-action@master with: src: 'github/ryanxin7' # 这里改为自己github账号名称，如github/ryanxin7 dst: 'gitee/ryanxin' # 这里改为gitee上账号名称，如gitee/ryanxin dst_key: ${{ secrets.GITEE_PRIVATE_KEY }} # 这是本地生成的私钥，Github拿着私钥调用Gitee公钥 dst_token: ${{ secrets.GITEE_TOKEN }} # 这是gitee上生成的token，下面会讲 force_update: true static_list: \"xxlog\" # 同步的仓库名称，这里为xxlog，意思是会自动同步该仓库到gitee下同名仓库 debug: true","date":"2023-06-12","objectID":"/posts/cicd/github-synctogitee/:1:2","tags":["CI/CD","持续集成"],"title":"Github Actions 自动同步到 Gitee","uri":"/posts/cicd/github-synctogitee/"},{"categories":null,"content":"2.配置公钥私钥和Gitee Token ","date":"2023-06-12","objectID":"/posts/cicd/github-synctogitee/:2:0","tags":["CI/CD","持续集成"],"title":"Github Actions 自动同步到 Gitee","uri":"/posts/cicd/github-synctogitee/"},{"categories":null,"content":"2.1 配置Gitee私钥 配置公钥和私钥：公钥是Gitee这里拿着，私钥是Github拿着。因为是Github这里要同步到Gitee. 生成私钥和公钥：ssh-kengen -t ed25529 -C xxxx@xxx.com ，具体可参见：生成/添加SSH公钥 生成完之后，会在指定目录下有两个文件：id_ed25519和id_ed25519.public，前者是私钥，后者是公钥 将id_ed25519用记事本打开，复制里面内容，粘贴到Github个人仓库下的secret中。 步骤：点击仓库首页选项卡setting，会看到如下图，点击新建New repository secret： 输入Name为GITEE_PRIVATE_KEY, Value为复制id_ed25519的私钥内容 ","date":"2023-06-12","objectID":"/posts/cicd/github-synctogitee/:2:1","tags":["CI/CD","持续集成"],"title":"Github Actions 自动同步到 Gitee","uri":"/posts/cicd/github-synctogitee/"},{"categories":null,"content":"2.2 配置Gitee 公钥 输入标题为GITEE_PUB_KEY, Value为复制id_ed25519.pub的私钥内容 ","date":"2023-06-12","objectID":"/posts/cicd/github-synctogitee/:2:2","tags":["CI/CD","持续集成"],"title":"Github Actions 自动同步到 Gitee","uri":"/posts/cicd/github-synctogitee/"},{"categories":null,"content":"2.3 配置私人令牌 打开Gitee个人账号的设置页面 → 点击安全设置下的私人令牌 → 右上角生成新令牌，如下图所示： 需要添加以下权限： 点击提交之后，会得到类似下图所示的私人令牌，将其复制，并配置到Github的secret界面，类似上一步的私钥那样。 配置到Github的secret界面 最终Github这里配置的Actions secrets如下： ","date":"2023-06-12","objectID":"/posts/cicd/github-synctogitee/:2:3","tags":["CI/CD","持续集成"],"title":"Github Actions 自动同步到 Gitee","uri":"/posts/cicd/github-synctogitee/"},{"categories":null,"content":"3.查看同步状态 成功同步 ","date":"2023-06-12","objectID":"/posts/cicd/github-synctogitee/:2:4","tags":["CI/CD","持续集成"],"title":"Github Actions 自动同步到 Gitee","uri":"/posts/cicd/github-synctogitee/"},{"categories":null,"content":"Jenkins 安装与基础配置 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-install/:1:0","tags":["CI/CD"],"title":"Jenkins 安装与基础配置","uri":"/posts/cicd/jenkins-install/"},{"categories":null,"content":"配置java环境 Jdk下载：https://www.oracle.com/java/technologies/downloads/ 版本jdk要求: tar -xf #创建软连接 root@etcd02[11:05:51]/apps/Jenkins #:ln -sv /apps/jdk1.8.0_371/ /usr/local/jdk '/usr/local/jdk' -\u003e '/apps/Jenkins/jdk1.8.0_371/' root@etcd02[11:07:53]/apps/Jenkins #:ln -sv /apps/jdk1.8.0_371/bin/java /usr/bin/java '/usr/bin/java' -\u003e '/apps/Jenkins/jdk1.8.0_371/bin/java'root@server:/apps# ln -sv /apps/jdk-17.0.6/ /usr/local/jdk '/usr/local/jdk' -\u003e '/apps/jdk-17.0.6/' root@server:/apps# ln -sv /apps/jdk-17.0.6/bin/java /usr/bin/java '/usr/bin/java' -\u003e '/apps/jdk-17.0.6/bin/java' apt-get install fontconfig","date":"2023-06-12","objectID":"/posts/cicd/jenkins-install/:1:1","tags":["CI/CD"],"title":"Jenkins 安装与基础配置","uri":"/posts/cicd/jenkins-install/"},{"categories":null,"content":"配置环境变量 vim /etc/profile.d/jdk-bin-path.sh export JAVA_HOME=/usr/local/jdk export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH export CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar source /etc/profile.d/jdk-bin-path.shroot@etcd02[13:55:57]/etc/profile.d #:java -version java version \"1.8.0_371\" Java(TM) SE Runtime Environment (build 1.8.0_371-b11) Java HotSpot(TM) 64-Bit Server VM (build 25.371-b11, mixed mode)","date":"2023-06-12","objectID":"/posts/cicd/jenkins-install/:1:2","tags":["CI/CD"],"title":"Jenkins 安装与基础配置","uri":"/posts/cicd/jenkins-install/"},{"categories":null,"content":"安装Jenkins Ubuntu 安装包下载： https://mirrors.tuna.tsinghua.edu.cn/jenkins/debian-stable/ 安装安装依赖 apt install net-tools dpkg -i jenkins_2.361.4_all.deb 获取密码 设置清华源 该url是国内的清华大学的镜像地址（建议使用清华大学的镜像服务器，修改后刷新页面即可. https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json find / -name *.UpdateCenter.xml /var/lib/jenkins/hudson.model.UpdateCenter.xml vim /var/lib/jenkins/hudson.model.UpdateCenter.xml \u003c?xml version='1.1' encoding='UTF-8'?\u003e \u003csites\u003e \u003csite\u003e \u003cid\u003edefault\u003c/id\u003e \u003curl\u003ehttps://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\u003c/url\u003e \u003c/site\u003e \u003c/sites\u003e下载插件 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-install/:1:3","tags":["CI/CD"],"title":"Jenkins 安装与基础配置","uri":"/posts/cicd/jenkins-install/"},{"categories":null,"content":"1.安装插件 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:1:0","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"1.1 安装NodeJS插件 点击系统管理,然后点击插件管理,在可选插件里面搜索NodeJS插件,然后安装 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:1:1","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"1.2 安装连接SSH的插件 Publish Over SSH用于连接远程服务器 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:1:2","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"1.3 安装把应用发布到远程服务器的插件 **Deploy to container **插件用于把打包的应用发布到远程服务 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:1:3","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"2. 配置git和NodeJS环境 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:2:0","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"2.1 安装配置git #安装git root@server:~# apt install git root@server:~# whereis git #查看git的执行文件位置, 默认是在 /usr/bin/git whereis git git: /usr/bin/git /usr/share/man/man1/git.1.gz ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:2:1","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"2.2 安装配置NodeJS NodeJs 下载地址：https://nodejs.org/dist/ cd /apps tar -zxvf node-v16.18.1-linux-x64.tar.gz #创建软连接 ln -sv node-v16.18.1-linux-x64/ /usr/local/node填写本地node路径 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:2:2","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"3. 新建项目部署信息 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:3:0","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"3.1 源码管理 填写项目仓库地址 配置免密公钥认证 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:3:1","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"3.2 构建触发器 定时每五分钟检查一次代码仓库有没有新的提交，如果有新的提交就自动构建项目并发布到目标前端服务器。 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:3:2","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"3.3 构建环境 3.4 执行Shell命令 npm config get registry npm install --legacy-peer-deps npm run docs:build cd src/.vuepress/dist export DIST_NAME=\"dist-v\"$(date +\"%Y%m%d%H%M%S\")\"\" tar -zcf $WORKSPACE/deployment/$DIST_NAME.tar.gz ./* \\cp $WORKSPACE/deployment/$DIST_NAME.tar.gz $WORKSPACE/deployment/dist-latest.tar.gz rm -rf $WORKSPACE/src/.vuepress/dist","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:3:3","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"3.5 构建后操作 用到SSH Publishers 插件，将项目代码文件推送到目标主机。 SSH Publishers 配置 系统管理—\u003e 系统配置 —\u003e Publish over SSH Passphrase: 公钥密码 Name:目标服务器名称 Hostname：目标服务器IP地址 Username: 目标主机用户名 Remote Directory：目标主机存放目录 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:3:4","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"4.测试项目自动发布 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:4:0","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"4.1 测试手动构建发布 立即构建 控制台输出查看任务进度 构建成功 前端服务器目录下验证 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:4:1","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":null,"content":"4.2 测试自动构建发布 代码更新后自动构建并发布 ","date":"2023-06-12","objectID":"/posts/cicd/jenkins-autodeploy/:4:2","tags":["CI/CD","持续集成"],"title":"Jenkins实践-自动构建并发布前端项目","uri":"/posts/cicd/jenkins-autodeploy/"},{"categories":["HAProxy"],"content":"六、HAProxy https实现 #配置HAProxy支持https协议，支持ssl会话； bind *:443 ssl crt /PATH/TO/SOME_PEM_FILE #crt 后证书文件为PEM格式，且同时包含证书和所有私钥 cat demo.crt demo.key \u003e demo.pem #把80端口的请求重向定443 bind *:80 redirect scheme https if !{ ssl_fc } #向后端传递用户请求的协议和端口（frontend或backend） http_request set-header X-Forwarded-Port %[dst_port] http_request add-header X-Forwared-Proto https if { ssl_fc } ","date":"2023-02-07","objectID":"/posts/haproxy/haproxy-4/:1:0","tags":["负载均衡"],"title":"HAProxy-https实现（四）","uri":"/posts/haproxy/haproxy-4/"},{"categories":["HAProxy"],"content":"6.1 证书制作 #方法1 [root@centos7 ~]mkdir /etc/haproxy/certs/ [root@centos7 ~]cd /etc/haproxy/certs/ [root@centos7 certs]#openssl genrsa -out haproxy.key 2048 [root@centos7 certs]#openssl req -new -x509 -key haproxy.key -out haproxy.crt -subj \"/CN=www.xinblog.org\" #或者用下一条命令实现 [root@centos7 certs]#openssl req -x509 -newkey rsa:2048 -subj \"/CN=www.magedu.org\" -keyout haproxy.key -nodes -days 365 -out haproxy.crt [root@centos7 certs]#cat haproxy.key haproxy.crt \u003e haproxy.pem [root@centos7 certs]#openssl x509 -in haproxy.pem -noout -text #查看证书 ","date":"2023-02-07","objectID":"/posts/haproxy/haproxy-4/:1:1","tags":["负载均衡"],"title":"HAProxy-https实现（四）","uri":"/posts/haproxy/haproxy-4/"},{"categories":["HAProxy"],"content":"6.2 https配置示例 [root@centos7 ~]#cat /etc/haproxy/conf.d/test.cfg frontend magedu_http_port bind 10.0.0.7:80 bind 10.0.0.7:443 ssl crt /etc/haproxy/certs/haproxy.pem redirect scheme https if !{ ssl_fc } # 注意{ }内的空格 http-request set-header X-forwarded-Port %[dst_port] http-request add-header X-forwarded-Proto https if { ssl_fc } mode http balance roundrobin log global option httplog ###################### acl setting ############################### acl mobile_domain hdr_dom(host) -i mobile.magedu.org ###################### acl hosts ################################# default_backend pc_hosts ################### backend hosts ################################# backend mobile_hosts mode http server web1 10.0.0.17:80 check inter 2000 fall 3 rise 5 backend pc_hosts mode http #http-request set-header X-forwarded-Port %[dst_port] 也可加在此处 #http-request add-header X-forwarded-Proto https if { ssl_fc } server web2 10.0.0.27:80 check inter 2000 fall 3 rise 5 [root@centos7 ~]#ss -ntl State Recv-Q Send-Q Local Address:Port Peer Address:Port LISTEN 0 100 127.0.0.1:25 *:* LISTEN 0 128 10.0.0.7:443 *:* LISTEN 0 128 *:9999 *:* LISTEN 0 128 10.0.0.7:80 *:* LISTEN 0 128 *:22 *:* LISTEN 0 128 [::]:22 [::]:* global maxconn 100000 chroot /var/lib/haproxy stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin #uid 99 #gid 99 user haproxy group haproxy daemon #nbproc 4 #cpu-map 1 0 #cpu-map 2 1 #cpu-map 3 2 #cpu-map 4 3 pidfile /var/lib/haproxy/haproxy.pid log 127.0.0.1 local2 info defaults option http-keep-alive maxconn 100000 option forwardfor mode http timeout connect 300000ms timeout client 300000ms timeout server 300000ms listen stats mode http bind 0.0.0.0:9999 stats enable log global stats uri /haproxy-status stats auth haadmin:123456 listen http_80 mode http bind 10.1.0.6:30013 bind 10.1.0.6:443 ssl crt /etc/haproxy/certs/haproxy.pem redirect scheme https if !{ ssl_fc } http-request set-header X-forwarded-Port %[dst_port] http-request add-header X-forwarded-Proto https if { ssl_fc } balance roundrobin log global option forwardfor server web1 10.1.0.31:30013 check inter 2000 fall 3 rise 5 server web2 10.1.0.32:30013 check inter 2000 fall 3 rise 5 ","date":"2023-02-07","objectID":"/posts/haproxy/haproxy-4/:1:2","tags":["负载均衡"],"title":"HAProxy-https实现（四）","uri":"/posts/haproxy/haproxy-4/"},{"categories":["HAProxy"],"content":"五、HAProxy调度算法 HAProxy通过固定参数 **balance ** 指明对后端服务器的调度算法，该参数可以配置在listen或backend选项中。 HAProxy的调度算法分为静态和动态调度算法，但是有些算法可以根据参数在静态和动态算法中相互转换。 官方文档：http://cbonte.github.io/haproxy-dconv/2.6/configuration.html#balance ","date":"2023-02-06","objectID":"/posts/haproxy/haproxy-3/:1:0","tags":["负载均衡"],"title":"HAProxy-调度算法(三)","uri":"/posts/haproxy/haproxy-3/"},{"categories":["HAProxy"],"content":"5.1 静态算法 :::info ** 静态算法**：按照事先定义好的规则轮询公平调度，不关心后端服务器的当前负载、链接数和响应速度等，且无法实时修改权重，只能靠重启HAProxy生效。 ::: 可以利用 socat工具对服务器动态权重和其它状态的调整，Socat 是 Linux 下的一个多功能的网络工具，名字来由是Socket CAT，Socat 的主要特点就是在两个数据流之间建立通道，且支持众多协议和链接方式。如 IP、TCP、 UDP、IPv6、Socket文件等 **利用工具socat 对服务器动态权重调整 ** [root@centos7 ~]#yum -y install socat [root@centos7 ~]#echo \"show info\" | socat stdio /var/lib/haproxy/haproxy.sock Name: HAProxy Version: 2.1.3 Release_date: 2020/02/12 Nbthread: 4 Nbproc: 1 Process_num: 1 Pid: 2279 Uptime: 0d 0h46m07s Uptime_sec: 2767 Memmax_MB: 0 PoolAlloc_MB: 0 PoolUsed_MB: 0 PoolFailed: 0 Ulimit-n: 200041 Maxsock: 200041 Maxconn: 100000 Hard_maxconn: 100000 CurrConns: 0 CumConns: 1 CumReq: 1 MaxSslConns: 0 CurrSslConns: 0 CumSslConns: 0 Maxpipes: 0 PipesUsed: 0 PipesFree: 0 ConnRate: 0 ConnRateLimit: 0 MaxConnRate: 0 SessRate: 0 SessRateLimit: 0 MaxSessRate: 0 SslRate: 0 SslRateLimit: 0 MaxSslRate: 0 SslFrontendKeyRate: 0 SslFrontendMaxKeyRate: 0 SslFrontendSessionReuse_pct: 0 SslBackendKeyRate: 0 SslBackendMaxKeyRate: 0 SslCacheLookups: 0 SslCacheMisses: 0 CompressBpsIn: 0 CompressBpsOut: 0 CompressBpsRateLim: 0 ZlibMemUsage: 0 MaxZlibMemUsage: 0 Tasks: 19 Run_queue: 1 Idle_pct: 100 node: centos7.wangxiaochun.com Stopping: 0 Jobs: 7 Unstoppable Jobs: 0 Listeners: 6 ActivePeers: 0 ConnectedPeers: 0 DroppedLogs: 0 BusyPolling: 0 FailedResolutions: 0 TotalBytesOut: 0 BytesOutRate: 0 DebugCommandsIssued: 0 [root@centos7 ~]#echo \"show servers state\" | socat stdio /var/lib/haproxy/haproxy.sock1 # be_id be_name srv_id srv_name srv_addr srv_op_state srv_admin_state srv_uweight srv_iweight srv_time_since_last_change srv_check_status srv_check_result srv_check_health srv_check_state srv_agent_state bk_f_forced_id srv_f_forced_id srv_fqdn srv_port srvrecord 2 magedu-test-80 1 web1 10.0.0.17 2 0 2 1 812 6 3 7 6 0 0 0 - 80 - 2 magedu-test-80 2 web2 10.0.0.27 2 0 2 3 812 6 3 4 6 0 0 0 - 80 - 4 web_port 1 web1 127.0.0.1 0 0 1 1 810 8 2 0 6 0 0 0 - 8080 - [root@centos7 ~]#echo \"get weight magedu-test-80/web2\" | socat stdio /var/lib/haproxy/haproxy.sock 3 (initial 3) #修改weight，注意只针对单进程有效 [root@centos7 ~]#echo \"set weight magedu-test-80/web2 2\" | socat stdio /var/lib/haproxy/haproxy.sock [root@centos7 ~]#echo \"get weight magedu-test-80/web2\" | socat stdio /var/lib/haproxy/haproxy.sock 2 (initial 3) #将后端服务器禁用，注意只针对单进程有效 [root@centos7 ~]#echo \"disable server magedu-test-80/web2\" | socat stdio /var/lib/haproxy/haproxy.sock #将后端服务器软下线，即weight设为0 [root@centos7 ~]#echo \"set weight magedu-test-80/web1 0\" | socat stdio /var/lib/haproxy/haproxy.sock #将后端服务器禁用，针对多进程 [root@centos7 ~]#vim /etc/haproxy/haproxy.cfg ...... stats socket /var/lib/haproxy/haproxy1.sock mode 600 level admin process 1 stats socket /var/lib/haproxy/haproxy2.sock mode 600 level admin process 2 nbproc 2 ..... [root@centos7 ~]#echo \"disable server magedu-test-80/web2\" | socat stdio /var/lib/haproxy/haproxy1.sock [root@centos7 ~]#echo \"disable server magedu-test-80/web2\" | socat stdio /var/lib/haproxy/haproxy2.sock [root@haproxy ~]#for i in {1..2};do echo \"set weight magedu-test-80/web$i 10\" | socat stdio /var/lib/haproxy/haproxy$i.sock;done #如果静态算法，如:static-rr，可以更改weight为0或1，但不支持动态更改weight为其它值，否则会提示下面信息 [root@centos7 ~]#echo \"set weight magedu-test-80/web1 0\" | socat stdio /var/lib/haproxy/haproxy.sock [root@centos7 ~]#echo \"set weight magedu-test-80/web1 1\" | socat stdio /var/lib/haproxy/haproxy.sock [root@centos7 ~]#echo \"set weight magedu-test-80/web1 2\" | socat stdio /var/lib/haproxy/haproxy.sock Backend is using a static LB algorithm and only accepts weights '0%' and '100%'.5.1.1 static-rr :::info static-rr：基于权重的轮询调度，不支持权重的运行时利用socat进行动态调整及后端服务器慢启动，其后端主机数量没有限制，相当于LVS中的 wrr ::: listen web_host bind 10.0.0.7:80,:8801-8810,10.0.0.7:9001-9010 mode http log global balance static-rr server web1 10.0.0.17:80 weight 1 check inter 3000 fall 2 rise 5 server web2 10.0.0.27:80 weight 2 check inter 3000 fall 2 rise 55.1.2 first :::warning first：根据服务器在列表中的位置，自上而下进行调度，但是其只会当第一台服务器的连接数达到上限，新请求才会分配给下一台服务，因此会忽略服务器的权","date":"2023-02-06","objectID":"/posts/haproxy/haproxy-3/:1:1","tags":["负载均衡"],"title":"HAProxy-调度算法(三)","uri":"/posts/haproxy/haproxy-3/"},{"categories":["HAProxy"],"content":"5.2 动态算法 :::success 动态算法：基于后端服务器状态进行调度适当调整，优先调度至当前负载较低的服务器，且权重可以在haproxy运行时动态调整无需重启。 ::: 5.2.1 roundrobin roundrobin：基于权重的轮询动态调度算法，支持权重的运行时调整，不同于lvs中的rr轮训模式，HAProxy中的roundrobin支持慢启动(新加的服务器会逐渐增加转发数)，其每个后端backend中最多支持4095个real server，支持对real server权重动态调整，roundrobin为默认调度算法。 listen web_host bind 10.0.0.7:80,:8801-8810,10.0.0.7:9001-9010 mode http log global balance roundrobin server web1 10.0.0.17:80 weight 1 check inter 3000 fall 2 rise 5 server web2 10.0.0.27:80 weight 2 check inter 3000 fall 2 rise 5支持动态调整权重: # echo \"get weight web_host/web1\" | socat stdio /var/lib/haproxy/haproxy.sock 1 (initial 1) # echo \"set weight web_host/web1 3\" | socat stdio /var/lib/haproxy/haproxy.sock # echo \"get weight web_host/web1\" | socat stdio /var/lib/haproxy/haproxy.sock 3 (initial 1)5.2.2 leastconn leastconn加权的最少连接的动态，支持权重的运行时调整和慢启动，即当前后端服务器连接最少的优先调度(新客户端连接)，比较适合长连接的场景使用，比如：MySQL等场景。 listen web_host bind 10.0.0.7:80,:8801-8810,10.0.0.7:9001-9010 mode http log global balance leastconn server web1 10.0.0.17:80 weight 1 check inter 3000 fall 2 rise 5 server web2 10.0.0.27:80 weight 1 check inter 3000 fall 2 rise 55.2.3 random 在1.9版本开始增加一个叫做random的负载平衡算法，其基于随机数作为一致性hash的key，随机负载平衡对于大型服务器场或经常添加或删除服务器非常有用，支持weight的动态调整，weight较大的主机有更大概率获取新请求。 listen web_host bind 10.0.0.7:80,:8801-8810,10.0.0.7:9001-9010 mode http log global balance random server web1 10.0.0.17:80 weight 1 check inter 3000 fall 2 rise 5 server web2 10.0.0.27:80 weight 1 check inter 3000 fall 2 rise 5","date":"2023-02-06","objectID":"/posts/haproxy/haproxy-3/:1:2","tags":["负载均衡"],"title":"HAProxy-调度算法(三)","uri":"/posts/haproxy/haproxy-3/"},{"categories":["HAProxy"],"content":"5.3 其他算法 其它算法即可作为静态算法，又可以通过选项成为动态算法 5.3.1 source 源地址hash，基于用户源地址hash并将请求转发到后端服务器，后续同一个源地址请求将被转发至同一个后端web服务器。 此方式当后端服务器数据量发生变化时，会导致很多用户的请求转发至新的后端服务器，默认为静态方式，但是可以通过hash-type支持的选项更改。 这个算法一般是在不插入Cookie的TCP模式下使用，也可给拒绝会话cookie的客户提供最好的会话粘性，适用于session会话保持但不支持cookie和缓存的场景 源地址有两种转发客户端请求到后端服务器的服务器选取计算方式，分别是取模法和一致性hash 5.3.2 map-base取模法 map-based：取模法，对source地址进行hash计算，再基于服务器总权重的取模，最终结果决定将此请求转发至对应的后端服务器。 此方法是静态的，即不支持在线调整权重，不支持慢启动，可实现对后端服务器均衡调度。 缺点是当服务器的总权重发生变化时，即有服务器上线或下线，都会因总权重发生变化而导致调度结果整体改变，hash-type 指定的默认值为此算法 。 所谓取模运算，就是计算两个数相除之后的余数，**10%7=3, 7%4=3 ** map-based算法：基于权重取模，hash(source_ip)%所有后端服务器相加的总权重 listen web_host bind 10.0.0.7:80,:8801-8810,10.0.0.7:9001-9010 mode tcp log global balance source hash-type map-based server web1 10.0.0.17:80 weight 1 check inter 3000 fall 2 rise 3 server web2 10.0.0.27:80 weight 1 check inter 3000 fall 2 rise 3 [root@haproxy ~]#echo \"set weight web_host/10.0.0.27 10\" | socat stdio /var/lib/haproxy/haproxy.sock Backend is using a static LB algorithm and only accepts weights '0%' and '100%'. [root@haproxy ~]#echo \"set weight web_host/10.0.0.27 0\" | socat stdio /var/lib/haproxy/haproxy.sock [root@haproxy conf.d]#echo \"get weight web_host/10.0.0.27\" | socat stdio /var/lib/haproxy/haproxy.sock 0 (initial 1)5.3.3 一致性hash 一致性哈希，当服务器的总权重发生变化时，对调度结果影响是局部的，不会引起大的变动，hash（o）mod n ，该hash算法是动态的，支持使用 socat等工具进行在线权重调整，支持慢启动 。 算法： 1、key1=hash(source_ip)%(2^32) [0---4294967295] 2、keyA=hash(后端服务器虚拟ip)%(2^32) 3、将key1和keyA都放在hash环上，将用户请求调度到离key1最近的keyA对应的后端服务器** hash环偏斜问题 ** 增加虚拟服务器IP数量，比如：一个后端服务器根据权重为1生成1000个虚拟IP，再hash。而后端服务器权重为2则生成2000的虚拟IP，再hash,最终在hash环上生成3000个节点，从而解决hash环偏斜问题hash对象 Hash对象到后端服务器的映射关系： 一致性hash示意图 后端服务器在线与离线的调度方式 一致性hash配置示例 listen web_host bind 10.0.0.7:80,:8801-8810,10.0.0.7:9001-9010 mode tcp log global balance source hash-type consistent server web1 10.0.0.17:80 weight 1 check inter 3000 fall 2 rise 5 server web2 10.0.0.27:80 weight 1 check inter 3000 fall 2 rise 5","date":"2023-02-06","objectID":"/posts/haproxy/haproxy-3/:1:3","tags":["负载均衡"],"title":"HAProxy-调度算法(三)","uri":"/posts/haproxy/haproxy-3/"},{"categories":["HAProxy"],"content":"四、基础配置详解 官方文档：http://cbonte.github.io/haproxy-dconv/2.6/configuration.html HAProxy 的配置文件haproxy.cfg由两大部分组成，分别是global和proxies部分 **global ：全局配置段 ** 进程及安全配置相关的参数 性能调整相关参数 Debug参数** proxies：代理配置段 ** defaults：为frontend, backend, listen提供默认配置 frontend：前端，相当于nginx中的server {} backend：后端，相当于nginx中的upstream {} listen：同时拥有前端和后端配置 ","date":"2023-02-05","objectID":"/posts/haproxy/haproxy-2/:1:0","tags":["负载均衡"],"title":"HAProxy-基础配置详解 （二）","uri":"/posts/haproxy/haproxy-2/"},{"categories":["HAProxy"],"content":"4.1 global配置 4.1.1 global 配置参数说明 官方文档：http://cbonte.github.io/haproxy-dconv/2.6/configuration.html chroot #锁定运行目录 deamon #以守护进程运行 stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin process 1 #链接本机的socket文件，定义权限方便对负载进行动态调整 user, group, uid, gid #运行haproxy的用户身份 nbproc n #多进程模式，开启worker进程数，建议与cpu个数相同，默认为1。开启时就不在支持线程模式，没开启时，一个进程下面有多个线程 #nbthread 1 #指定每个haproxy进程开启的线程数，默认为每个进程一个线程,和nbproc互斥（版本有关） #如果同时启用nbproc和nbthread 会出现以下日志的错误，无法启动服务 Apr 7 14:46:23 haproxy haproxy: [ALERT] 097/144623 (1454) : config : cannot enable multiple processes if multiple threads are configured. Please use either nbproc or nbthread but not both. cpu-map 1 0 #绑定haproxy 进程至指定CPU，将第一个work进程绑定至0号CPU cpu-map 2 1 #绑定haproxy 进程至指定CPU，将第二个work进程绑定至1号CPU maxconn 100000 #每个haproxy进程的最大并发连接数 maxsslconn n #每个haproxy进程ssl最大连接数,用于haproxy配置了证书的场景下 maxconnrate n #每个进程每秒创建的最大连接数量 spread-checks n #后端server状态check随机提前或延迟百分比时间，建议2-5(20%-50%)之间，默认值0 pidfile #指定pid文件路径 log 127.0.0.1 local2 info #定义全局的syslog服务器；日志服务器需要开启UDP协议，最多可以定义两个 4.4.2 多进程和线程 范例：多进程和socket文件 查看CPU核心数量 [root@localhost haproxy]# cat /proc/cpuinfo | grep \"cores\" | uniq cpu cores : 8[root@centos7 ~]#vim /etc/haproxy/haproxy.cfg global maxconn 100000 chroot /apps/haproxy stats socket /var/lib/haproxy/haproxy.sock1 mode 600 level admin process 1 stats socket /var/lib/haproxy/haproxy.sock2 mode 600 level admin process 2 uid 99 gid 99 daemon nbproc 2 [root@centos7 ~]#systemctl restart haproxy [root@centos7 ~]#pstree -p |grep haproxy |-haproxy(2634)-+-haproxy(2637) | `-haproxy(2638) [root@centos7 ~]#ll /var/lib/haproxy/ total 4 -rw-r--r-- 1 root root 5 Mar 31 18:49 haproxy.pid srw------- 1 root root 0 Mar 31 18:49 haproxy.sock1 srw------- 1 root root 0 Mar 31 18:49 haproxy.sock2 4.4.3 配置HAProxy记录日志到指定日志文件中 #在global配置项定义： log 127.0.0.1 local{1-7} info #基于syslog记录日志到指定设备，级别有(err、warning、info、debug) listen web_port bind 127.0.0.1:80 mode http log global #开启当前web_port的日志功能，默认不记录日志 server web1 127.0.0.1:8080 check inter 3000 fall 2 rise 5 # systemctl restart haproxy Rsyslog配置 vim /etc/rsyslog.conf $ModLoad imudp $UDPServerRun 514 # Save boot messages also to boot.log local7.* /var/log/boot.log local5.* /var/log/haproxy.log local0.* /var/log/haproxy.log # systemctl restart rsyslog 验证HAProxy日志 重启syslog服务并访问app页面，然后验证是否生成日志 [root@localhost log]# tail -f haproxy.log Feb 13 11:11:57 localhost haproxy[3127]: Connect from 172.16.32.242:64058 to 10.1.0.6:30013 (web_port/HTTP) Feb 13 11:11:57 localhost haproxy[3127]: Connect from 172.16.32.242:64058 to 10.1.0.6:30013 (web_port/HTTP) Feb 13 11:11:59 localhost haproxy[3127]: Connect from 172.16.32.242:64058 to 10.1.0.6:30013 (web_port/HTTP) Feb 13 11:11:59 localhost haproxy[3127]: Connect from 172.16.32.242:64058 to 10.1.0.6:30013 (web_port/HTTP) Feb 13 11:11:59 localhost haproxy[3127]: Connect from 172.16.32.242:64058 to 10.1.0.6:30013 (web_port/HTTP) Feb 13 11:11:59 localhost haproxy[3127]: Connect from 172.16.32.242:64058 to 10.1.0.6:30013 (web_port/HTTP) Feb 13 11:11:59 localhost haproxy[3127]: Connect from 172.16.32.242:64061 to 10.1.0.6:30013 (web_port/HTTP) Feb 13 11:11:59 localhost haproxy[3127]: Connect from 172.16.32.242:64061 to 10.1.0.6:30013 (web_port/HTTP) Feb 13 11:11:59 localhost haproxy[3127]: Connect from 172.16.32.242:64061 to 10.1.0.6:30013 (web_port/HTTP) Feb 13 11:11:59 localhost haproxy[3127]: Connect from 172.16.32.242:64061 to 10.1.0.6:30013 (web_port/HTTP) ","date":"2023-02-05","objectID":"/posts/haproxy/haproxy-2/:1:1","tags":["负载均衡"],"title":"HAProxy-基础配置详解 （二）","uri":"/posts/haproxy/haproxy-2/"},{"categories":["HAProxy"],"content":"4.2 Proxies配置 官方文档：http://docs.haproxy.org/2.6/configuration.html#4 defaults [\u003cname\u003e] #默认配置项，针对以下的frontend、backend和listen生效，可以多个name也可以没有name frontend \u003cname\u003e #前端servername，类似于Nginx的一个虚拟主机 server和LVS服务集群。 backend \u003cname\u003e #后端服务器组，等于nginx的upstream和LVS中的RS服务器 listen \u003cname\u003e #将frontend和backend合并在一起配置，相对于frontend和backend配置更简洁，生产常用**注意：name字段只能使用大小写字母，数字，‘-’(dash)，’_‘(underscore)，’.’ (dot)和 ‘:’(colon)，并且严格区分大小写 ** 4.2.1 Proxies配置-frontend frontend 配置参数： bind： #指定HAProxy的监听地址，可以是IPV4或IPV6，可以同时监听多个IP或端口，可同时用于listen字段中 #格式： bind [\u003caddress\u003e]:\u003cport_range\u003e [, ...] [param*] #注意：如果需要绑定在非本机的IP，需要开启内核参数：net.ipv4.ip_nonlocal_bind=1范例： listen http_proxy #监听http的多个IP的多个端口和sock文件 bind :80,:443,:8801-8810 bind 10.0.0.1:10080,10.0.0.1:10443 bind /var/run/ssl-frontend.sock user root mode 600 accept-proxy listen http_https_proxy #https监听 bind :80 bind :443 ssl crt /etc/haproxy/site.pem #公钥和私钥公共文件 listen http_https_proxy_explicit #监听ipv6、ipv4和unix sock文件 bind ipv6@:80 bind ipv4@public_ssl:443 ssl crt /etc/haproxy/site.pem bind unix@ssl-frontend.sock user root mode 600 accept-proxy listen external_bind_app1 #监听file descriptor bind \"fd@${FD_APP1}\"** 生产示例：** frontend magedu_web_port #可以采用后面形式命名：业务-服务-端口号 bind :80,:8080 bind 10.0.0.7:10080,:8801-8810,10.0.0.17:9001-9010 mode http|tcp #指定负载协议类型 use_backend \u003cbackend_name\u003e #调用的后端服务器组名称 4.2.2 Proxies配置-backend 定义一组后端服务器，backend服务器将被frontend进行调用。 mode http|tcp #指定负载协议类型,和对应的frontend必须一致 option #配置选项 server #定义后端real server注意：option后面加** httpchk，smtpchk,mysql-check,pgsql-check，ssl-hello-chk**方法，可用于实现更多应用层检测功能。 option 配置 check #对指定real进行健康状态检查，如果不加此设置，默认不开启检查 addr \u003cIP\u003e #可指定的健康状态监测IP，可以是专门的数据网段，减少业务网络的流量 port \u003cnum\u003e #指定的健康状态监测端口 inter \u003cnum\u003e #健康状态检查间隔时间，默认2000 ms fall \u003cnum\u003e #后端服务器从线上转为线下的检查的连续失效次数，默认为3 rise \u003cnum\u003e #后端服务器从下线恢复上线的检查的连续有效次数，默认为2 weight \u003cweight\u003e #默认为1，最大值为256，0表示不参与负载均衡，但仍接受持久连接 backup #将后端服务器标记为备份状态,只在所有非备份主机down机时提供服务，类似Sorry Server disabled #将后端服务器标记为不可用状态，即维护状态，除了持久模式，将不再接受连接 redirect prefix http://www.baidu.com/ #将请求临时(302)重定向至其它URL，只适用于http模式 redir http://www.baidu.com #将请求临时(302)重定向至其它URL，只适用于http模式 maxconn \u003cmaxconn\u003e #当前后端server的最大并发连接数 backlog \u003cbacklog\u003e #当前端服务器的连接数达到上限后的后援队列长度，注意：不支持backend 4.2.3 frontend+backend配置实例 范例1： frontend xin-test-http bind :80,:8080 mode tcp use_backend magedu-test-http-nodes backend magedu-test-http-nodes mode tcp default-server inter 1000 weight 6 server web1 10.0.0.17:80 check weight 2 addr 10.0.0.117 port 8080 server web1 10.0.0.27:80 check范例2： #官网业务访问入口 frontend WEB_PORT_80 bind 10.0.0.7:80 mode http use_backend web_prot_http_nodes backend web_prot_http_nodes mode http option forwardfor server 10.0.0.17 10.0.0.17:8080 check inter 3000 fall 3 rise 5 server 10.0.0.27 10.0.0.27:8080 check inter 3000 fall 3 rise 5 4.2.4 Proxies配置-listen替代frontend+backend 使用listen替换上面的frontend和backend的配置方式，可以简化设置，通常只用于TCP协议的应用 #官网业务访问入口 listen WEB_PORT_80 bind 10.0.0.7:80 mode http option forwardfor server web1 10.0.0.17:8080 check inter 3000 fall 3 rise 5 server web2 10.0.0.27:8080 check inter 3000 fall 3 rise 5 ","date":"2023-02-05","objectID":"/posts/haproxy/haproxy-2/:1:2","tags":["负载均衡"],"title":"HAProxy-基础配置详解 （二）","uri":"/posts/haproxy/haproxy-2/"},{"categories":["HAProxy"],"content":"4.3 使用子配置文件保存配置 当业务众多时，将所有配置都放在一个配置文件中，会造成维护困难。可以考虑按业务分类，将配置信息拆分，放在不同的子配置文件中，从而达到方便维护的目的。 #创建子配置目录 [root@centos7 ~]#mkdir /etc/haproxy/conf.d/ #创建子配置文件，注意：必须为cfg后缀 [root@centos7 ~]#vim /etc/haproxy/conf.d/test.cfg listen WEB_PORT_80 bind 10.0.0.7:80 mode http balance roundrobin server web1 10.0.0.17:80 check inter 3000 fall 2 rise 5 server web2 10.0.0.27:80 check inter 3000 fall 2 rise 5 #添加子配置目录到unit文件中 [root@centos7 ~]#vim /lib/systemd/system/haproxy.service [Unit] Description=HAProxy Load Balancer After=syslog.target network.target [Service] ExecStartPre=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/conf.d/ -c -q ExecStart=/usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/conf.d/ -p /var/lib/haproxy/haproxy.pid ExecReload=/bin/kill -USR2 $MAINPID [Install] WantedBy=multi-user.target [root@centos7 ~]#systemctl daemon-reload [root@centos7 ~]#systemctl restart haproxy ","date":"2023-02-05","objectID":"/posts/haproxy/haproxy-2/:1:3","tags":["负载均衡"],"title":"HAProxy-基础配置详解 （二）","uri":"/posts/haproxy/haproxy-2/"},{"categories":["docker"],"content":"1.下载Docker二进制包 Docker 下载地址： https://download.docker.com/win/static/stable/x86_64/ https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/ Docker-compos 下载地址： https://github.com/docker/compose/releases https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-linux-x86_64 ","date":"2023-02-04","objectID":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/:1:0","tags":["docker"],"title":"Docker 二进制方式安装","uri":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/"},{"categories":["docker"],"content":"2.安装Docker tar xvf docker-24.0.5.zip cp docker/* /usr/bin cp containerd.service /lib/systemd/system/containerd.service cp docker.service /lib/systemd/system/docker.service cp docker.socket /lib/systemd/system/docker.socket cp docker-compose-Linux-x86_64_2.20.3 /usr/bin/docker-compose groupadd docker \u0026\u0026 useradd docker -g docker systemctl enable containerd.service \u0026\u0026 systemctl restart containerd.service systemctl enable docker.service \u0026\u0026 systemctl restart docker.service systemctl enable docker.socket \u0026\u0026 systemctl restart docker.socket ","date":"2023-02-04","objectID":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/:2:0","tags":["docker"],"title":"Docker 二进制方式安装","uri":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/"},{"categories":["docker"],"content":"2.1 containerd.service containerd 是 Docker 的核心组件之一，负责管理容器的生命周期、镜像传输以及容器进程的执行,如创建命名空间、控制组、文件系统等。 Docker 在其架构中使用了容器运行时（Container Runtime）来管理容器的生命周期。containerd 实现了 OCI（Open Container Initiative）标准，这是一个开放的行业标准，旨在定义容器和容器运行时的规范。这使得 containerd 能够与其他符合 OCI 标准的工具和库协同工作。 在 Linux 系统中，containerd 以守护进程的形式运行。为了确保 containerd 在系统启动时自动启动，并能够受到 systemd（一个常用的初始化系统和服务管理器）的管理，需要创建并配置一个 containerd.service 单元。 这个服务单元定义了 containerd 守护进程的启动方式、参数以及其他相关设置。 [Unit] Description=containerd container runtime Documentation=https://containerd.io After=network.target local-fs.target [Service] ExecStartPre=-/sbin/modprobe overlay ExecStart=/usr/bin/containerd Type=notify Delegate=yes KillMode=process Restart=always # Having non-zero Limit*s causes performance problems due to accounting overhead # in the kernel. We recommend using cgroups to do container-local accounting. LimitNPROC=infinity LimitCORE=infinity LimitNOFILE=1048576 # Comment TasksMax if your systemd version does not supports it. # Only systemd 226 and above support this version. TasksMax=infinity [Install] WantedBy=multi-user.target","date":"2023-02-04","objectID":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/:2:1","tags":["docker"],"title":"Docker 二进制方式安装","uri":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/"},{"categories":["docker"],"content":"2.2 docker.service docker.service 是一个 Systemd 服务单元，用于管理 Docker 守护进程（dockerd）的运行。Systemd 是一个常用的初始化系统和服务管理器，而服务单元则定义了如何启动、停止和管理特定的服务。 在 Docker 的架构中，dockerd 是 Docker 守护进程，负责管理容器的创建、运行、停止等任务。docker.service 的作用是管理 dockerd 进程的生命周期，使得 Docker 守护进程可以在系统启动时自动启动，并在需要时提供管理和监控。 [Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com BindsTo=containerd.service After=network-online.target firewalld.service containerd.service Wants=network-online.target Requires=docker.socket [Service] Type=notify # the default is not to use systemd for cgroups because the delegate issues still # exists and systemd currently does not support the cgroup feature set required # for containers run by docker ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ExecReload=/bin/kill -s HUP $MAINPID TimeoutSec=0 RestartSec=2 Restart=always # Note that StartLimit* options were moved from \"Service\" to \"Unit\" in systemd 229. # Both the old, and new location are accepted by systemd 229 and up, so using the old location # to make them work for either version of systemd. StartLimitBurst=3 # Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230. # Both the old, and new name are accepted by systemd 230 and up, so using the old name to make # this option work for either version of systemd. StartLimitInterval=60s # Having non-zero Limit*s causes performance problems due to accounting overhead # in the kernel. We recommend using cgroups to do container-local accounting. LimitNOFILE=infinity LimitNPROC=infinity LimitCORE=infinity # Comment TasksMax if your systemd version does not support it. # Only systemd 226 and above support this option. TasksMax=infinity # set delegate yes so that systemd does not reset the cgroups of docker containers Delegate=yes # kill only the docker process, not all processes in the cgroup KillMode=process [Install] WantedBy=multi-user.target Description 提供了关于服务的简要描述。 Documentation 可以提供指向 Docker 文档的链接。 ExecStart 指定了如何启动 dockerd 进程，这里的 -H fd:// 告诉 Docker 守护进程通过文件描述符进行通信。 Restart 规定了在发生错误时如何重启服务。 StartLimitIntervalSec 和 StartLimitBurst 规定了在一段时间内尝试启动服务的次数限制，以避免过多的重试。 WantedBy=multi-user.target 表示该服务会在多用户模式下启动，即在系统引导后的一般操作状态下。 ","date":"2023-02-04","objectID":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/:2:2","tags":["docker"],"title":"Docker 二进制方式安装","uri":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/"},{"categories":["docker"],"content":"2.3 docker.socket docker.socket 是一个 Systemd 套接字（socket）单元，用于与 Docker 守护进程（dockerd）之间的通信。 具体来说，docker.socket 通过监听一个特定的网络端口或者 Unix 域套接字（Unix Domain Socket），等待来自 Docker 客户端的连接请求。一旦有请求连接，docker.socket 就会将请求转发给 dockerd 进程，然后 dockerd 处理这些请求并执行相应的操作，如创建或管理容器。 [Unit] Description=Docker Socket for the API PartOf=docker.service [Socket] ListenStream=/var/run/docker.sock SocketMode=0660 SocketUser=root SocketGroup=docker [Install] WantedBy=sockets.target","date":"2023-02-04","objectID":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/:2:3","tags":["docker"],"title":"Docker 二进制方式安装","uri":"/posts/docker/docker%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/"},{"categories":["HAProxy"],"content":"三、HAProxy安装及基础配置 介绍HAProxy的基础安装及基础配置 ","date":"2023-02-04","objectID":"/posts/haproxy/haproxy-1/:1:0","tags":["负载均衡"],"title":"HAProxy-安装及基础配置（一）","uri":"/posts/haproxy/haproxy-1/"},{"categories":["HAProxy"],"content":"3.1 源码包安装 官方提供了Ubuntu和Debian的包，没有Centos的包 ubuntu 安装 apt-get install --no-install-recommends software-properties-common #--no-install-recommends 参数来避免安装非必须的文件，从而减小镜像的体积 add-apt-repository ppa:vbernat/haproxy-2.6 apt-get install haproxy=2.6.\\*#安装常用软件包 apt-get install --no-install-recommends software-properties-common -y #--no-install-recommends 参数来避免安装非必须的文件，从而减小镜像的体积 #安装源 root@etcd01[11:10:22]~ #:add-apt-repository ppa:vbernat/haproxy-2.6 HAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for web sites crawling under very high loads while needing persistence or Layer7 processing. Supporting tens of thousands of connections is clearly realistic with todays hardware. Its mode of operation makes its integration into existing architectures very easy and riskless, while still offering the possibility not to expose fragile web servers to the Net. This PPA contains packages for HAProxy 2.6. More info: https://launchpad.net/~vbernat/+archive/ubuntu/haproxy-2.6 Press [ENTER] to continue or Ctrl-c to cancel adding it. Get:1 http://ppa.launchpad.net/vbernat/haproxy-2.6/ubuntu focal InRelease [23.8 kB] Hit:2 http://cn.archive.ubuntu.com/ubuntu focal InRelease Hit:3 http://cn.archive.ubuntu.com/ubuntu focal-updates InRelease Hit:4 http://cn.archive.ubuntu.com/ubuntu focal-backports InRelease Hit:5 http://cn.archive.ubuntu.com/ubuntu focal-security InRelease Get:6 http://ppa.launchpad.net/vbernat/haproxy-2.6/ubuntu focal/main amd64 Packages [1,000 B] Get:7 http://ppa.launchpad.net/vbernat/haproxy-2.6/ubuntu focal/main Translation-en [704 B] Fetched 25.5 kB in 2s (14.0 kB/s) Reading package lists... Done #查看可用版本 root@etcd01[11:11:01]~ #:apt-cache madison haproxy haproxy | 2.6.8-1ppa1~focal | http://ppa.launchpad.net/vbernat/haproxy-2.6/ubuntu focal/main amd64 Packages haproxy | 2.0.29-0ubuntu1.1 | http://cn.archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages haproxy | 2.0.29-0ubuntu1.1 | http://cn.archive.ubuntu.com/ubuntu focal-security/main amd64 Packages haproxy | 2.0.13-2 | http://cn.archive.ubuntu.com/ubuntu focal/main amd64 Packages #安装2.6 apt-get install haproxy=2.6.\\* -y #验证haproxy版本 root@etcd01[13:50:48]~ #:haproxy -v HAProxy version 2.6.8-1ppa1~focal 2023/01/24 - https://haproxy.org/ Status: long-term supported branch - will stop receiving fixes around Q2 2027. Known bugs: http://www.haproxy.org/bugs/bugs-2.6.8.html Running on: Linux 5.4.0-135-generic #152-Ubuntu SMP Wed Nov 23 20:19:22 UTC 2022 x86_64 Centos安装 在centos系统上通过yum、编译等多种安装方式。默认yum源默认的base仓库中包含haproxy的安装包文件，但是版本比较旧，是1.5.18的版本，距离当前版本已经有较长时间没有更新，由于版本比较旧所以有很多功能不支持，如果对功能和性能没有要求可以使用此版本，否则推荐使用新版本。 # yum install haproxy -y #验证haproxy版本 # haproxy -v HA-Proxy version 1.5.18 2016/05/10 Copyright 2000-2016 Willy Tarreau \u003cwilly@haproxy.org\u003e ","date":"2023-02-04","objectID":"/posts/haproxy/haproxy-1/:1:1","tags":["负载均衡"],"title":"HAProxy-安装及基础配置（一）","uri":"/posts/haproxy/haproxy-1/"},{"categories":["HAProxy"],"content":"3.2 编译安装HAProxy 编译安装HAProxy 2.0 LTS版本，源码包下载地址：http://www.haproxy.org/download/ 3.2.1 解决lua环境 HAProxy支持基于lua实现功能扩展，lua是一种小巧的脚本语言，于1993年由巴西里约热内卢天主教大学（Pontiﬁcal Catholic University of Rio de Janeiro）里的一个研究小组开发，其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。 Lua 官网：www.lua.org Lua应用场景 游戏开发 独立应用脚本 Web应用脚本 扩展和数据库插件，如MySQL Proxy 安全系统，如入侵检测系统 Centos 环境：由于centos自带的lua版本比较低并不符合HAProxy要求的lua最低版本(5.3)的要求，因此需要编译安装较新版本的lua环境，然后才能编译安装HAProxy，过程如下： #当前系统版本 [root@centos7 ~]#lua -v Lua 5.1.4 Copyright (C) 1994-2008 Lua.org, PUC-Rio #安装基础命令及编译依赖环境 [root@centos7 ~]# yum install gcc readline-devel [root@centos7 ~]# wget http://www.lua.org/ftp/lua-5.3.5.tar.gz [root@centos7 ~]# tar xvf lua-5.3.5.tar.gz -C /usr/local/src [root@centos7 ~]# cd /usr/local/src/lua-5.3.5 [root@centos7 lua-5.3.5]# make linux test [root@localhost lua-5.3.5]# make linux test cd src \u0026\u0026 make linux make[1]: 进入目录“/usr/local/src/lua-5.3.5/src” make all SYSCFLAGS=\"-DLUA_USE_LINUX\" SYSLIBS=\"-Wl,-E -ldl -lreadline\" make[2]: 进入目录“/usr/local/src/lua-5.3.5/src” gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lapi.o lapi.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lcode.o lcode.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lctype.o lctype.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o ldebug.o ldebug.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o ldo.o ldo.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o ldump.o ldump.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lfunc.o lfunc.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lgc.o lgc.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o llex.o llex.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lmem.o lmem.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lobject.o lobject.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lopcodes.o lopcodes.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lparser.o lparser.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lstate.o lstate.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lstring.o lstring.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o ltable.o ltable.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o ltm.o ltm.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lundump.o lundump.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lvm.o lvm.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lzio.o lzio.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lauxlib.o lauxlib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lbaselib.o lbaselib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lbitlib.o lbitlib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lcorolib.o lcorolib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o ldblib.o ldblib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o liolib.o liolib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lmathlib.o lmathlib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o loslib.o loslib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lstrlib.o lstrlib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o ltablib.o ltablib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o lutf8lib.o lutf8lib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o loadlib.o loadlib.c gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX -c -o linit.o linit.c ar rcu liblua.a lapi.o lcode.o l","date":"2023-02-04","objectID":"/posts/haproxy/haproxy-1/:1:2","tags":["负载均衡"],"title":"HAProxy-安装及基础配置（一）","uri":"/posts/haproxy/haproxy-1/"},{"categories":["HAProxy"],"content":"3.3 验证haproxy状态 3.3.1 验证监听端口 [root@localhost haproxy]# ss -tnl State Recv-Q Send-Q Local Address:Port Peer Address:Port LISTEN 0 128 127.0.0.1:631 *:* LISTEN 0 100 *:8088 *:* LISTEN 0 3 127.0.0.1:31769 *:* LISTEN 0 100 127.0.0.1:25 *:* LISTEN 0 128 *:1883 *:* LISTEN 0 128 *:30013 *:* LISTEN 0 50 *:8161 *:* LISTEN 0 1 127.0.0.1:8005 *:* LISTEN 0 128 *:5672 *:* LISTEN 0 50 *:43178 *:* LISTEN 0 128 *:6379 *:* LISTEN 0 128 *:61613 *:* LISTEN 0 50 *:61614 *:* LISTEN 0 128 *:9999 *:* 3.3.2 查看haproxy的状态页面 浏览器访问：http://haproxy-server:9999/haproxy-status 3.3.3 测试转发 10.1.0.6:30013 转发到 10.1.0.31:30013 ✅ ","date":"2023-02-04","objectID":"/posts/haproxy/haproxy-1/:1:3","tags":["负载均衡"],"title":"HAProxy-安装及基础配置（一）","uri":"/posts/haproxy/haproxy-1/"},{"categories":null,"content":"关于我 👨🏻‍💻 一名云原生工程师 🍟爱吃好吃的饭,玩好玩的游戏，看好看的剧 🛸 AI依赖患者 @Ryan's Recent activity\rhttps://github.com/ryanxin7\r2020 年毕业后为了“混口饭吃”便开启了运维开发的升级之路，在升级的过程中，我发现我很喜欢“折腾”🤔。 发现了自己对技术的兴趣和热爱，也喜欢不断地尝试新的东西和探索未知的领域。 我希望能够与他人交流和分享自己的经验和心得🙈。 在这个过程中，我相信自己可以不断地成长和进步，实现自己的梦想和目标。 为捋清脑袋中无序的片段，于是我开始在此进行记录📝。\r","date":"2020-07-28","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"}]