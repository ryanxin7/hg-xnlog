<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - Ryan&#39;s Notebook</title>
    <link>https://hg-xnlog.github.io/posts/</link>
    <description>所有文章 | Ryan&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>99929x@gmail.com (Ryan)</managingEditor>
      <webMaster>99929x@gmail.com (Ryan)</webMaster><lastBuildDate>Mon, 08 Jan 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://hg-xnlog.github.io/posts/" rel="self" type="application/rss+xml" /><item>
  <title>kubernetes 中的网络实现方式</title>
  <link>https://hg-xnlog.github.io/posts/kubernetes/primary/networking-implementation-in-kubernetes/</link>
  <pubDate>Mon, 08 Jan 2024 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/kubernetes/primary/networking-implementation-in-kubernetes/</guid>
  <description><![CDATA[1.kubernetes 网络通信方案简介 Kubernetes 的网络涉及到各种 Pod 之间的通信以及 Pod 与外部网络的连接。而 Kubernetes 的网络实现通常依赖于第三方网络插件，这些插件需要遵循一定的规范，]]></description>
</item>
<item>
  <title>kubernetes RBAC鉴权机制与多用户实例</title>
  <link>https://hg-xnlog.github.io/posts/kubernetes/primary/kubernetes-rbac-and-multi-user-instances/</link>
  <pubDate>Thu, 04 Jan 2024 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/kubernetes/primary/kubernetes-rbac-and-multi-user-instances/</guid>
  <description><![CDATA[1.概述 基于角色的访问控制（Role-Based Access Control，RBAC）是一种广泛应用的访问控制模型，它基于用户的角色来管理对系统资源的]]></description>
</item>
<item>
  <title>lesson 5语音对应规则</title>
  <link>https://hg-xnlog.github.io/posts/20000/lesson5/</link>
  <pubDate>Fri, 29 Dec 2023 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/20000/lesson5/</guid>
  <description><![CDATA[![lesson 5语音对应规则](https://cdn1.ryanxin.live/lesson 5语音对应规则.png)]]></description>
</item>
<item>
  <title>kubernetes pod、container与namespace资源限制</title>
  <link>https://hg-xnlog.github.io/posts/kubernetes/primary/kubernetespodcontainer%E4%B8%8Enamespace%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</link>
  <pubDate>Thu, 28 Dec 2023 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/kubernetes/primary/kubernetespodcontainer%E4%B8%8Enamespace%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</guid>
  <description><![CDATA[1.kubernetes中资源限制概括 CPU 以核心为单位,1C =1000 豪核，例如24核心48线程就是 48x1000 = 4800豪核 memory 以字节为单位， 1G = 1x1024x1024 requests 为kube]]></description>
</item>
<item>
  <title>词根 prud</title>
  <link>https://hg-xnlog.github.io/posts/rootwords/prud-/</link>
  <pubDate>Tue, 26 Dec 2023 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/rootwords/prud-/</guid>
  <description><![CDATA[词根 prud 这个词根的含义与智慧、谨慎和审慎相关，与对情况的思考、考虑和预见有关。 在英语中，“prud-”作为词根用于构成与谨慎、智慧和理智相关的]]></description>
</item>
<item>
  <title>Docker CE 软件仓库在线安装方式</title>
  <link>https://hg-xnlog.github.io/posts/docker/dockerce%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85/</link>
  <pubDate>Mon, 25 Dec 2023 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/docker/dockerce%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85/</guid>
  <description><![CDATA[1.环境准备 如果你过去安装过 docker，先删掉： for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do apt-get remove $pkg; done安装依赖： apt-get update apt-get install ca-certificates curl gnupg2.添加仓库镜像源 信任 Docker]]></description>
</item>
<item>
  <title>K8S 结合filebeat及logstash对Pod日志收集和输出</title>
  <link>https://hg-xnlog.github.io/posts/kubernetes/advanced/k8s-%E7%BB%93%E5%90%88filebeat%E5%8F%8Alogstash%E5%AF%B9pod%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%92%8C%E8%BE%93%E5%87%BA/</link>
  <pubDate>Thu, 07 Dec 2023 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/kubernetes/advanced/k8s-%E7%BB%93%E5%90%88filebeat%E5%8F%8Alogstash%E5%AF%B9pod%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%92%8C%E8%BE%93%E5%87%BA/</guid>
  <description><![CDATA[K8S 结合filebeat及logstash对Pod日志收集和输出 一、安装Elasticsearch 1.1 安装软件包 root@es1:/tmp# dpkg -i elasticsearch-7.6.2-amd64.deb Selecting previously unselected package elasticsearch. (Reading database ... 67342 files and directories]]></description>
</item>
<item>
  <title>k8s结合Jenkins与gitlab代码升级与回滚</title>
  <link>https://hg-xnlog.github.io/posts/kubernetes/advanced/k8s%E7%BB%93%E5%90%88jenkins%E4%B8%8Egitlab%E4%BB%A3%E7%A0%81%E5%8D%87%E7%BA%A7%E4%B8%8E%E5%9B%9E%E6%BB%9A/</link>
  <pubDate>Mon, 04 Dec 2023 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/kubernetes/advanced/k8s%E7%BB%93%E5%90%88jenkins%E4%B8%8Egitlab%E4%BB%A3%E7%A0%81%E5%8D%87%E7%BA%A7%E4%B8%8E%E5%9B%9E%E6%BB%9A/</guid>
  <description><![CDATA[k8s结合Jenkins与gitlab代码升级与回滚 一、jenkins环境准备 1.1 安装jdk17 tar -xf jdk-17.0.9_linux-x64.tar.gz -C /opt ## 配置环境变量 vim /etc/profile.d/java.sh JAVA_HOME=/opt/jdk-17.0.9 CLASSPATH=.:$JAVA_HOME/lib/jrt-fs.jar PATH=$PATH:$JAVA_HOME/bin source /etc/]]></description>
</item>
<item>
  <title>docker 构建JDK17 镜像</title>
  <link>https://hg-xnlog.github.io/posts/docker/%E6%9E%84%E5%BB%BAjdk17%E9%95%9C%E5%83%8F/</link>
  <pubDate>Fri, 01 Dec 2023 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/docker/%E6%9E%84%E5%BB%BAjdk17%E9%95%9C%E5%83%8F/</guid>
  <description><![CDATA[构建JDK17 镜像 1.下载JDK17程序包 2.准备JDK17 Dockerfile FROM ubuntu:latest MAINTAINER xinn.cc WORKDIR /usr/local/java17 ADD ./jdk-17.0.9_linux-x64.tar.gz /usr/local/java17/ ENV JAVA_HOME=/usr/local/java17/jdk-17.0.9 ENV CLASSPATH=.:$JAVA_HOME/lib/jrt-fs.jar ENV PATH=$PATH:$JAVA_HOME/bin3. 构建脚本 #!/bin/bash TAG=$1 docker build -t harbor.ceamg.com/baseimages/jdk17_0.9:${TAG} . docker push harbor.ceam]]></description>
</item>
<item>
  <title>docker 批量删除  Exited  状态的容器</title>
  <link>https://hg-xnlog.github.io/posts/docker/docker-%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4-exited-%E7%8A%B6%E6%80%81%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
  <pubDate>Fri, 01 Dec 2023 00:00:00 &#43;0000</pubDate>
  <author>Ryan</author>
  <guid>https://hg-xnlog.github.io/posts/docker/docker-%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4-exited-%E7%8A%B6%E6%80%81%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
  <description><![CDATA[docker 批量删除 Exited 状态的容器 docker rm $(docker ps -a -q -f status=exited)这个命令会列出所有处于 Exited 状态的容器，并将其删除。 docker ps -a：列出所有的容器，包]]></description>
</item>
</channel>
</rss>
